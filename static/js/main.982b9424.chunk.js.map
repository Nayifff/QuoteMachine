{"version":3,"sources":["quotemachine.js","App.js","serviceWorker.js","index.js"],"names":["QuoteMachine","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getRandomQuote","event","fetch","END_POINT","then","response","json","data","content","title","console","error","quote","state","Qdata","link","setState","hasQuote","shareOnTwtter","url","text","window","open","encodeURIComponent","renderQuote","react_default","a","createElement","dangerouslySetInnerHTML","__html","onClick","react","Component","App","className","quotemachine","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+NA4EeA,cAzEf,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACdC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAYAI,eAAiB,SAAAC,GACjBC,MAAMT,EAAKU,WACNC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACN,IAAGA,EAAK,GAAGC,UAAWD,EAAK,GAAGE,MAc9B,OAAOC,QAAQC,MAAM,oBAdgB,IAChCC,EAASnB,EAAKoB,MAAdD,MACDE,EAAMP,EAAK,GACfK,EAAMJ,QAAUM,EAAMN,QACtBI,EAAMH,MAAQK,EAAML,MACpBG,EAAMG,KAAOD,EAAMC,KACnBtB,EAAKuB,SAAS,CACdJ,SAAQ,YACmB,IAAxBnB,EAAKoB,MAAMI,UACdxB,EAAKuB,SAAS,CAACC,UAAU,SA1BfxB,EAkCdyB,cAAgB,SAACC,EAAIC,GAGrBC,OAAOC,KAAK,4CAA+CC,mBAAmBH,GAAO,GAAI,uFArC3E3B,EA0Cd+B,YAAc,WAGd,OACAC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,wBAAyB,CAAEC,OAAQpC,EAAKoB,MAAMD,MAAMJ,WACxDiB,EAAAC,EAAAC,cAAA,iBAASlC,EAAKoB,MAAMD,MAAMH,MAA1B,KACAgB,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAMrC,EAAKyB,cAAczB,EAAKoB,MAAMD,MAAMG,KAAKtB,EAAKoB,MAAMD,MAAMJ,WAAjF,yBA/CJf,EAAKoB,MAAQ,CACbD,MAAO,CACPJ,QAAS,GACTO,KAAM,GACNN,MAAO,IACPQ,UAAU,GAEVxB,EAAKU,UAAY,yFATHV,wEAsDL,IACDwB,EAAarB,KAAKiB,MAAlBI,SACR,OACIQ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACI,EAAA,SAAD,KACIN,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,UAAQG,QAASlC,KAAKI,gBAAtB,iCAFJ,IAEiFyB,EAAAC,EAAAC,cAAA,WAFjF,IAEwFF,EAAAC,EAAAC,cAAA,YACrE,IAAbV,EACFrB,KAAK4B,cACE,2BAhEYQ,aCSZC,MARf,WACE,OACER,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAACQ,EAAD,QCMcC,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC","file":"static/js/main.982b9424.chunk.js","sourcesContent":["import React, { Component, Fragment} from 'react';\n\nclass QuoteMachine extends Component { \nconstructor() { \nsuper(); \nthis.state = { \nquote: { \ncontent: '', \nlink: '', \ntitle: ''},\nhasQuote: false\n};\nthis.END_POINT = 'https://quotesondesign.com/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=1'\n\n}\n    \ngetRandomQuote = event => { \nfetch(this.END_POINT)\n    .then(response => response.json())\n    .then(data => {\n    if(data[0].content && data[0].title) { \n    let {quote} = this.state; \n    let Qdata=data[0]; \n    quote.content = Qdata.content; \n    quote.title = Qdata.title;\n    quote.link = Qdata.link;\n    this.setState({ \n    quote}, () => { \n    if(this.state.hasQuote === false) { \n    this.setState({hasQuote: true})\n    }\n    })\n    }\n    else { \n    return console.error('No Quote, sorry!')}})\n}\n\nshareOnTwtter = (url,text) => { \n\n\nwindow.open('http://twitter.com/share?url=byNaif'+'&text='+encodeURIComponent(text), '', 'left=0,top=0,width=550,height=450,personalbar=0,toolbar=0,scrollbars=0,resizable=0');\n\n};\n          \n\nrenderQuote = () => {\n\n    \nreturn (\n<div> \n    <h3 dangerouslySetInnerHTML={{ __html: this.state.quote.content}} />\n    <h4> by {this.state.quote.title} </h4>\n    <button onClick={() => this.shareOnTwtter(this.state.quote.link,this.state.quote.content)}> Share on Twitter! </button> \n    </div>)\n}\n\n\nrender() { \nconst { hasQuote } = this.state;\nreturn ( \n    <div> \n    <Fragment> \n        <h1> Quote Machine! </h1>\n        <button onClick={this.getRandomQuote}> Click me to get a new quote </button> <br /> <br /> \n        { hasQuote === true ? \n        this.renderQuote()\n             : ' No Quote Yet! '}\n        </Fragment>\n    </div> \n\n)}\n\n}\n\n\n\nexport default QuoteMachine; ","import React from 'react';\nimport './App.css';\nimport QuoteMachine from './quotemachine';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <QuoteMachine /> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}